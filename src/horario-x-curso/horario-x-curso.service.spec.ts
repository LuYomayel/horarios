// Generated by CodiumAI




/*
Code Analysis

Main functionalities:
The HorarioXCursoService class is responsible for managing the schedules of courses. It allows creating, updating, and deleting schedules, as well as retrieving them by course or professor. It also has a method to generate a PDF calendar based on the schedules and course information provided.

Methods:
- create: creates a new schedule for a course, checking if the course already has a schedule for the given day and time.
- findAll: retrieves all schedules, populating related entities.
- findByCurso: retrieves schedules for a given course, populating related entities.
- findByProfesor: retrieves schedules for a given professor and shift, populating related entities.
- update: updates an existing schedule.
- getByID: retrieves a schedule by its ID, populating related entities.
- generarCalendario: generates a PDF calendar based on the schedules and course information provided.
- transformData: transforms the retrieved schedules into a format suitable for generating the PDF calendar.
- delete: deletes a schedule by its ID.

Fields:
- horarioXCursoModel: the Mongoose model for the HorarioXCurso entity.
- connection: the Mongoose connection.
- cursoService: an instance of the CursosService class, used to retrieve course information.
- ETurnoTarde: an enum with the afternoon shift module times.
- Profesor: a Mongoose schema for the Profesor entity.
*/



describe('HorarioXCursoService_class', () => {

    // Tests that a new HorarioXCurso can be created successfully. 
    it("test_create_horario_x_curso_successfully", async () => {
        // Arrange
        const mockHorarioXCursoModel = {
            findOne: jest.fn().mockReturnValue(null),
            save: jest.fn().mockResolvedValue({}),
        };
        const mockCursoService = {
            findOne: jest.fn().mockResolvedValue({ id: '123' }),
        };
        const horarioXCursoService = new HorarioXCursoService(
            mockHorarioXCursoModel,
            {},
            mockCursoService
        );
        const createHorarioXCursoDto = {
            modulo: 1,
            dia: EDia.lunes,
            curso: '123',
            materia: '456',
        };

        // Act
        const result = await horarioXCursoService.create(createHorarioXCursoDto);

        // Assert
        expect(mockHorarioXCursoModel.findOne).toHaveBeenCalledWith({
            modulo: 1,
            dia: EDia.lunes,
            curso: '123',
        });
        expect(mockHorarioXCursoModel.save).toHaveBeenCalled();
        expect(result).toEqual({});
    });

    // Tests that all HorarioXCurso can be found. 
    it("test_find_all_horarios_x_curso", async () => {
        // Arrange
        const mockHorarioXCursoModel = {
            find: jest.fn().mockReturnValue({
                populate: jest.fn().mockResolvedValue([]),
                exec: jest.fn().mockResolvedValue([]),
            }),
        };
        const horarioXCursoService = new HorarioXCursoService(mockHorarioXCursoModel, {}, {});

        // Act
        const result = await horarioXCursoService.findAll();

        // Assert
        expect(mockHorarioXCursoModel.find).toHaveBeenCalled();
        expect(result).toEqual([]);
    });

    // Tests that HorarioXCurso can be found by curso. 
    it("test_find_horarios_x_curso_by_curso", async () => {
        // Arrange
        const mockHorarioXCursoModel = {
            find: jest.fn().mockReturnValue({
                populate: jest.fn().mockResolvedValue([]),
                exec: jest.fn().mockResolvedValue([]),
            }),
        };
        const mockCursoService = {
            findByAnioAndDivision: jest.fn().mockResolvedValue({ _id: '123' }),
        };
        const horarioXCursoService = new HorarioXCursoService(
            mockHorarioXCursoModel,
            {},
            mockCursoService
        );

        // Act
        const result = await horarioXCursoService.findByCurso(1, 1);

        // Assert
        expect(mockCursoService.findByAnioAndDivision).toHaveBeenCalledWith(1, 1);
        expect(mockHorarioXCursoModel.find).toHaveBeenCalledWith({
            curso: '123',
        });
        expect(result).toEqual([]);
    });

    // Tests that HorarioXCurso can be found by profesor. 
    it("test_find_horarios_x_curso_by_profesor", async () => {
        // Arrange
        const mockHorarioXCursoModel = {
            find: jest.fn().mockReturnValue({
                populate: jest.fn().mockResolvedValue([]),
                exec: jest.fn().mockResolvedValue([]),
            }),
        };
        const mockCursoService = {
            findByTurno: jest.fn().mockResolvedValue([{ _id: '123' }]),
        };
        const horarioXCursoService = new HorarioXCursoService(
            mockHorarioXCursoModel,
            {},
            mockCursoService
        );

        // Act
        const result = await horarioXCursoService.findByProfesor('456', ETurno.mañana);

        // Assert
        expect(mockCursoService.findByTurno).toHaveBeenCalledWith(ETurno.mañana);
        expect(mockHorarioXCursoModel.find).toHaveBeenCalledWith({
            'arrayProfesores.profesor': '456',
            curso: { $in: ['123'] },
        });
        expect(result).toEqual([]);
    });

    // Tests that an existing HorarioXCurso can be updated. 
    it("test_update_horario_x_curso", async () => {
        // Arrange
        const mockHorarioXCursoModel = {
            findById: jest.fn().mockResolvedValue({}),
            findByIdAndUpdate: jest.fn().mockResolvedValue({}),
        };
        const horarioXCursoService = new HorarioXCursoService(mockHorarioXCursoModel, {}, {});

        // Act
        const result = await horarioXCursoService.update({ _id: '123' });

        // Assert
        expect(mockHorarioXCursoModel.findById).toHaveBeenCalledWith('123');
        expect(mockHorarioXCursoModel.findByIdAndUpdate).toHaveBeenCalledWith('123', { _id: '123' });
        expect(result).toEqual({});
    });

    // Tests that a calendar can be generated successfully. 
    it("test_generate_calendar_successfully", async () => {
        // Arrange
        const mockHandlebars = {
            compile: jest.fn().mockReturnValue(() => {}),
            registerHelper: jest.fn(),
        };
        const mockFs = {
            readFileSync: jest.fn().mockReturnValue('html'),
        };
        const mockPuppeteer = {
            launch: jest.fn().mockResolvedValue({
                newPage: jest.fn().mockResolvedValue({
                    setContent: jest.fn(),
                    pdf: jest.fn().mockResolvedValue('pdf'),
                }),
                close: jest.fn(),
            }),
        };
        const horarioXCursoService = new HorarioXCursoService({}, {}, {});
        horarioXCursoService.tardeManiana = jest.fn().mockReturnValue({});
        horarioXCursoService.getCssClassForProfesor = jest.fn().mockReturnValue('');
        horarioXCursoService.getTipoProfesor = jest.fn().mockReturnValue('');

        // Act
        const result = await horarioXCursoService.generarCalendario({});

        // Assert
});
